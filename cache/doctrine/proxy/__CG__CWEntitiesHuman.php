<?php

namespace DoctrineProxy\__CG__\CW\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Human extends \CW\Entities\Human implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setNameFirst($nameFirst)
    {
        $this->__load();
        return parent::setNameFirst($nameFirst);
    }

    public function getNameFirst()
    {
        $this->__load();
        return parent::getNameFirst();
    }

    public function setNameMiddle($nameMiddle)
    {
        $this->__load();
        return parent::setNameMiddle($nameMiddle);
    }

    public function getNameMiddle()
    {
        $this->__load();
        return parent::getNameMiddle();
    }

    public function setNameLast($nameLast)
    {
        $this->__load();
        return parent::setNameLast($nameLast);
    }

    public function getNameLast()
    {
        $this->__load();
        return parent::getNameLast();
    }

    public function addPhone(\CW\Entities\Phone $phones)
    {
        $this->__load();
        return parent::addPhone($phones);
    }

    public function removePhone(\CW\Entities\Phone $phones)
    {
        $this->__load();
        return parent::removePhone($phones);
    }

    public function getPhones()
    {
        $this->__load();
        return parent::getPhones();
    }

    public function addEmail(\CW\Entities\Email $emails)
    {
        $this->__load();
        return parent::addEmail($emails);
    }

    public function removeEmail(\CW\Entities\Email $emails)
    {
        $this->__load();
        return parent::removeEmail($emails);
    }

    public function getEmails()
    {
        $this->__load();
        return parent::getEmails();
    }

    public function addUrl(\CW\Entities\Url $urls)
    {
        $this->__load();
        return parent::addUrl($urls);
    }

    public function removeUrl(\CW\Entities\Url $urls)
    {
        $this->__load();
        return parent::removeUrl($urls);
    }

    public function getUrls()
    {
        $this->__load();
        return parent::getUrls();
    }

    public function addNote(\CW\Entities\Note $notes)
    {
        $this->__load();
        return parent::addNote($notes);
    }

    public function removeNote(\CW\Entities\Note $notes)
    {
        $this->__load();
        return parent::removeNote($notes);
    }

    public function getNotes()
    {
        $this->__load();
        return parent::getNotes();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name_first', 'name_middle', 'name_last', 'phones', 'emails', 'urls', 'notes');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}